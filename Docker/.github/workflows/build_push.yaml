name: build_and_push
on:
  push:
    branches:
      - 'main'
build-push:
    env:
      REGISTRY_NAME: c
      LOCAL_REPO: localhost:5000
      TRIVY_VERSION: "v0.31.3"
      HADOLINT_VERSION: "2.12.0"
    strategy:
      fail-fast: false
      matrix:
        notebook:
          - remote-desktop
    needs: pre-build-checks
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - name: Set ENV variables for a PR containing the auto-deploy tag
      if: github.event_name == 'pull_request' && contains( github.event.pull_request.labels.*.name, 'auto-deploy')
      run: |
        echo "REGISTRY= Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Connect to Azure DEV Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.DEV_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.DEV_REGISTRY_USERNAME }}
        password: ${{ secrets.DEV_REGISTRY_PASSWORD }}

    # Image building/storing locally
    - name: Make Dockerfiles
      run: make generate-dockerfiles.azurecr.io" >> "$GITHUB_ENV"
        echo "IMAGE_VERSION=dev" >> "$GITHUB_ENV"

    - name: Set ENV variables for pushes to master
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        echo "REGISTRY=k8scc01covidacr.azurecr.io" >> "$GITHUB_ENV"
        echo "IMAGE_VERSION=v1" >> "$GITHUB_ENV"
        echo "IS_LATEST=true" >> "$GITHUB_ENV"

    - uses: actions/checkout@master

    - name: Echo disk usage before clean up
      run: ./.github/scripts/echo_usage.sh

    - name: Free up all available disk space before building
      run: ./.github/scripts/cleanup_runner.sh

    - name: Echo disk usage before build start
      run: ./.github/scripts/echo_usage.sh

    - name: Get current notebook name
      id: notebook-name
      shell: bash
      run: |
        echo NOTEBOOK_NAME=${{ matrix.notebook }} >> $GITHUB_OUTPUT
